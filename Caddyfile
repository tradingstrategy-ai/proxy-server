#
# Caddy configuration for Trading Strategy website/backend APIs.
#
# Contains both production and staging environments.
#
#
{
    # Disable the Caddy admin API
    # This is personal preference, you can remove this if desired
    admin off
    email no-reply@tradingstrategy.ai

    log {
        output file /var/log/caddy/access.log
        format json
    }
}

#
# Production frontend and backend and docs
#
# PYramid backend API server is localhost:3456
# SvelteKit Node.js frontend SSR server is localhost:3000
#
http://tradingstrategy.ai {

    # Backend API request
    handle /api* {
        # This is the upstream Waitress server
        reverse_proxy 127.0.0.1:3456 {
            # Backend API must respond to an individual API call under 20s seconds
            transport http {
                response_header_timeout 20s
            }
        }
    }

    # Special URL endpoint for Google and other bots
    # that are robots.txt blocked from API
    handle_path /sitemap/* {
        # Same as /api, just a path rewrite using Caddy handle_path
        # https://webinstall.dev/caddy/
        rewrite * /api{path}
        reverse_proxy 127.0.0.1:3456
    }

    # Serve docs as files rsync'ed to the server
    # See trading-strategy/.github/workflows/rsync-docs.yml for more details
    # https://caddy.community/t/caddy-file-server-browse-not-working-when-root-a-specific-directory/15342/3
    redir /docs /docs/
    handle_path /docs* {
        # See docker-compose
        # mapped to /home/docs/html
        root * /docs
        file_server
    }


    # SvelteKit production server from frontend repository
    handle {
        reverse_proxy 127.0.0.1:3000 {
        header_up X-Forwarded-Host {host}
            # Frontend must render the page under 20 seconds
            transport http {
                response_header_timeout 20s
            }
        }
    }

    # Set the default 404 page
    # https://caddyserver.com/docs/caddyfile/directives/handle_errors
    handle_errors {
        respond "{http.error.status_code} {http.error.status_text}"
    }

    # Create a log file.
    # This is mapped to local FS thru docker-compose, so you can read it like
    # tail -f logs/access.log  | jq
    # but it is also consumed by logstash log forwarder
    log {
        format json
        output file /var/log/caddy/access.log
        #output stdout
        # Caddy cannot have two log outputs at the same time
    }

}

# New backend testing server
http://por-que.tradingstrategy.ai {

    # Backend API request
    handle /api* {
        # This is the upstream Gunicorn server
        reverse_proxy 127.0.0.1:3457 {
            # Backend API must respond to an individual API call under 20 seconds
            transport http {
                response_header_timeout 20s
            }
        }
    }
}

#
# Staging server.
#
# Pushed from a specific branch.
#
# Frontend - SvelteKit node.js adapter: 4000
#
# To run the SvelteKit frontend in tmux on the server see frontend/docs/staging.md
#
# Protected by HTTP Basic Auth, so that the website is not picked up by robots.
# The password is not super secret.
#
http://pinky.tradingstrategy.ai {

    # Staging Backend API requests
    # Handled by Matilda (see below)
    handle /api* {
        reverse_proxy 127.0.0.1:4567 {
            header_up X-Real-IP {remote_host}
        }
    }

    # Docs not available staging
    #handle /docs* {
    #    reverse_proxy https://boring-poitras-17190b.netlify.app {
    #        header_up Host boring-poitras-17190b.netlify.app
    #    }
    #}

    # SvelteKit production server from frontend repository
    handle {

        # Protect with password to prevent the server ending up in the Google index.
        # The password is angrybird, generated with cadddy hash-password.
        # This is mostly protecting against indexing.
        # https://caddyserver.com/docs/caddyfile/directives/basicauth
        basicauth {
	        pinky JDJhJDE0JFFpeTFyWHdKSkhwQzBsQkk3TGhkNnVEQW1WcnkzclhzTlJlaWVQMnpLVkxyNVh5Q1pIanIu
        }
        reverse_proxy 127.0.0.1:4000 {
            header_up X-Real-IP {remote_host}
        }
    }
}


# Server for oracle data
http://candlelightdinner.tradingstrategy.ai {

    reverse_proxy 127.0.0.1:6543 {
        header_up X-Real-IP {remote_host}
    }
}

# Server for web backend
# https://docs.pylonsproject.org/projects/waitress/en/latest/reverse-proxy.html
http://matilda.tradingstrategy.ai {

    reverse_proxy 127.0.0.1:3456 {
        header_up X-Real-IP {remote_host}
        # header_upstream X-Forwarded-Proto https
    }
}


# Integration test backend server
http://steve.tradingstrategy.ai {
    reverse_proxy 127.0.0.1:3457 {
        header_up X-Real-IP {remote_host}
    }
}

#
# Development trade-executor instances
#

#
# pancake-eth-usd-sma trade executor
#
# See https://tradingstrategy.ai/docs for details.
# Internal 19003 port is set in docker-compose.yml
#
http://pancake-eth-usd-sma.tradingstrategy.ai {
    reverse_proxy 127.0.0.1:19003
}


http://trader-joe-avax-usd-ema.tradingstrategy.ai {
    reverse_proxy 127.0.0.1:19004
}


http://quickswap-matic-usd-ema-final.tradingstrategy.ai {
    reverse_proxy 127.0.0.1:19005
}


http://enzyme-polygon-eth-usdc.tradingstrategy.ai {
    reverse_proxy 127.0.0.1:19006
}

http://enzyme-polygon-multipair.tradingstrategy.ai {
    reverse_proxy 127.0.0.1:19007
}

http://enzyme-polygon-matic-usdc.tradingstrategy.ai {
    reverse_proxy 127.0.0.1:19008
}

http://enzyme-polygon-eth-long-strength.tradingstrategy.ai {
    reverse_proxy 127.0.0.1:19009
}

http://polygon-eth-spot-short.tradingstrategy.ai {
    reverse_proxy 127.0.0.1:19011
}

# docs.capitalgram.com migration in Google Search Console
http://docs.capitalgram.com {
   root * /docs
   file_server

    # Set the default 404 page
    # https://caddyserver.com/docs/caddyfile/directives/handle_errors
    handle_errors {
        respond "{http.error.status_code} {http.error.status_text}"
    }

}

#
# Metrics
#
# Expose Caddy OpenMetrics end-point at localhost port 6000
#
http://127.0.0.1:6000 {
    metrics /metrics
}
